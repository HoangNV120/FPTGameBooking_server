package com.server.config.websockets;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.event.EventListener;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.messaging.simp.stomp.StompHeaderAccessor;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;
import org.springframework.web.socket.messaging.SessionConnectEvent;
import org.springframework.web.socket.messaging.SessionDisconnectEvent;
import org.springframework.web.socket.server.standard.ServerEndpointExporter;

@Slf4j
@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    /**
     * Cung c·∫•p `ServerEndpointExporter` ƒë·ªÉ c·∫•u h√¨nh c√°c endpoint WebSocket.
     * @return ServerEndpointExporter instance.
     */
    @Bean
    public ServerEndpointExporter serverEndpointExporter() {
        return new ServerEndpointExporter();
    }

    /**
     * C·∫•u h√¨nh Message Broker.
     * @param registry ƒë·ªëi t∆∞·ª£ng c·∫•u h√¨nh Message Broker.
     */
    @Override
    public void configureMessageBroker(final MessageBrokerRegistry registry) {
        // ƒê·ªãnh nghƒ©a prefix cho c√°c API ƒë·ªÉ x·ª≠ l√Ω tin nh·∫Øn t·ª´ client (FE g·ª≠i).
        // Nh·ªØng API n√†y th∆∞·ªùng ƒë∆∞·ª£c ƒë√°nh d·∫•u b·∫±ng @MessageMapping.
        // Ti·ªÅn t·ªë c·ªßa URL g·ª≠i th√¥ng ƒëi·ªáp
        registry.setApplicationDestinationPrefixes("/action");
        // ƒê·ªãnh nghƒ©a broker cho vi·ªác g·ª≠i message ƒë·∫øn c√°c client.
        // Client s·∫Ω subscribe ƒë∆∞·ªùng d·∫´n c√≥ prefix "/topic".
        registry.enableSimpleBroker("/subscribe");
    }

    /**
     * C·∫•u h√¨nh c√°c STOMP endpoint m√† client s·ª≠ d·ª•ng ƒë·ªÉ k·∫øt n·ªëi WebSocket.
     * @param registry ƒë·ªëi t∆∞·ª£ng c·∫•u h√¨nh StompEndpointRegistry.
     */
    @Override
    public void registerStompEndpoints(final StompEndpointRegistry registry) {
        // Th√™m endpoint WebSocket t·∫°i "/api/our-websocket"
        registry.addEndpoint("/api/our-websocket")
                .setHandshakeHandler(new UserHandshakeHandler()) // X·ª≠ l√Ω handshake
                .setAllowedOriginPatterns("*") // Cho ph√©p m·ªçi origin (c·∫ßn c·∫£i thi·ªán b·∫£o m·∫≠t)
                .withSockJS(); // H·ªó tr·ª£ giao th·ª©c SockJS cho c√°c tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ WebSocket.
    }

    @EventListener
    public void handleWebSocketConnectListener(SessionConnectEvent event) {
        StompHeaderAccessor headerAccessor = StompHeaderAccessor.wrap(event.getMessage());
        String sessionId = headerAccessor.getSessionId();
        log.info("üü¢ New WebSocket Connection - Session ID: {}", sessionId);

    }

    @EventListener
    public void handleWebSocketDisconnectListener(SessionDisconnectEvent event) {
        StompHeaderAccessor headerAccessor = StompHeaderAccessor.wrap(event.getMessage());
        String sessionId = headerAccessor.getSessionId();
        log.info("üî¥ WebSocket Disconnected - Session ID: {}", sessionId);
    }

}
