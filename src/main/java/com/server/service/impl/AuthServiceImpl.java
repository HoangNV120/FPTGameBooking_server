package com.server.service.impl;

import com.server.config.security.JwtUtils;
import com.server.constants.Constants;
import com.server.dto.request.auth.LoginRequest;
import com.server.dto.request.auth.RestPassword;
import com.server.dto.request.auth.SignInRequest;
import com.server.dto.response.auth.LoginResponse;
import com.server.dto.response.auth.ProfileResponse;
import com.server.entity.User;
import com.server.enums.LevelEnum;
import com.server.enums.RoleEnum;
import com.server.enums.StatusEnum;
import com.server.exceptions.CustomAccessDeniedException;
import com.server.exceptions.NotFoundExceptionHandler;
import com.server.exceptions.RestApiException;
import com.server.repository.UserRepository;
import com.server.service.AuthService;
import com.server.service.EmailService;
import com.server.util.RandomGenerator;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Collection;
import java.util.Optional;
import java.util.UUID;

@Slf4j
@Service
@RequiredArgsConstructor
public class AuthServiceImpl implements AuthService {

    private final JwtUtils jwtUtils;
    private final AuthenticationManager authenticationManager;
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final UserDetailsService userDetailsService;
    private final EmailService emailService;

    @Value("${spring.app.base-url}") // Base URL t·ª´ c·∫•u h√¨nh
    private String baseUrl;

    /**
     * X·ª≠ l√Ω ƒëƒÉng nh·∫≠p c·ªßa ng∆∞·ªùi d√πng.
     *
     * @param loginRequest ch·ª©a th√¥ng tin ƒëƒÉng nh·∫≠p c·ªßa ng∆∞·ªùi d√πng.
     * @return LoginResponse ch·ª©a th√¥ng tin tr·∫£ v·ªÅ sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng, bao g·ªìm token v√† role.
     */
    @Override
    public LoginResponse login(LoginRequest loginRequest) {
        log.info("LoginRequest: {}", loginRequest);

        Optional<User> optionalUser = userRepository.findByEmail(loginRequest.getUsername());
        if (optionalUser.isEmpty()) {
            throw new NotFoundExceptionHandler("T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.");
        }

        if(optionalUser.get().getStatus().equals(StatusEnum.INACTIVE)){
            throw new NotFoundExceptionHandler("T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t vui l√≤ng check mail x√°c nh·∫≠n!");
        }

        Authentication authentication;
        try {
            // X√°c th·ª±c ng∆∞·ªùi d√πng th√¥ng qua AuthenticationManager.
            authentication = authenticationManager
                    .authenticate(new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));
        } catch (AuthenticationException exception) {
            // N·∫øu x√°c th·ª±c th·∫•t b·∫°i, n√©m ngo·∫°i l·ªá truy c·∫≠p b·ªã t·ª´ ch·ªëi.
            throw new CustomAccessDeniedException("T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.");
        }

        // L∆∞u tr·ªØ th√¥ng tin x√°c th·ª±c v√†o SecurityContext
        SecurityContextHolder.getContext().setAuthentication(authentication);

        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c.
        UserDetails userDetails = (UserDetails) authentication.getPrincipal();

        // L·∫•y quy·ªÅn (role) c·ªßa ng∆∞·ªùi d√πng t·ª´ authorities.
        Collection<? extends GrantedAuthority> authorities = userDetails.getAuthorities();
        String role = authorities.stream()
                .map(GrantedAuthority::getAuthority)
                .findFirst()
                .orElse("");

        // T·∫°o JWT token v√† refresh token cho ng∆∞·ªùi d√πng.
        String jwtToken = jwtUtils.generateJwtToken(userDetails, optionalUser.get().getId());
        String jwtRefreshToken = jwtUtils.generateJwtRefreshToken(userDetails, optionalUser.get().getId());

        log.info("login===> jwtToken = {}, jwtRefreshToken = {}", jwtToken, jwtRefreshToken);

        return LoginResponse.builder()
                .username(userDetails.getUsername())
                .role(role)
                .accessToken(jwtToken)
                .refreshToken(jwtRefreshToken)
                .build();
    }

    /**
     * X·ª≠ l√Ω ƒëƒÉng k√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng m·ªõi.
     *
     * @param req ch·ª©a th√¥ng tin ƒëƒÉng k√Ω c·ªßa ng∆∞·ªùi d√πng.
     * @return LoginResponse ch·ª©a th√¥ng tin tr·∫£ v·ªÅ sau khi ƒëƒÉng k√Ω th√†nh c√¥ng, bao g·ªìm token.
     */
    @Override
    public String signUp(SignInRequest req) {
        log.info("SignInRequest: {}", req);

        Optional<User> optional = userRepository.findByEmail(req.getEmail());
        if (optional.isPresent()) {
            throw new RestApiException("T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i.");
        }

        User user = new User();
        user.setEmail(req.getEmail());
        user.setName(req.getName());
        user.setPoint(0);
        user.setLevel(LevelEnum.fromString(req.getLevel()));
        user.setRole(RoleEnum.fromString(req.getRole()));
        user.setStatus(StatusEnum.INACTIVE);
        user.setPassword(passwordEncoder.encode(req.getPassword()));
        user.setAvatar(StringUtils.isNotBlank(req.getAvatar())
                ? req.getAvatar() : Constants.DEFAULT_URL_AVATAR);

        //set token send to mail to active
        String activationToken = UUID.randomUUID().toString();
        user.setActiveToken(activationToken);
        userRepository.save(user);

        // G·ª≠i email k√≠ch ho·∫°t
        String activationLink = baseUrl + "/activate/" + activationToken;
        emailService.sendActivationEmail(req.getEmail(), activationLink);

        return "M·ªü Mail click v√†o link ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n";
    }

    /**
     * L·∫•y th√¥ng tin h·ªì s∆° ng∆∞·ªùi d√πng d·ª±a tr√™n email.
     *
     * @param email c·ªßa ng∆∞·ªùi d√πng c·∫ßn l·∫•y h·ªì s∆°.
     * @return ProfileResponse ch·ª©a th√¥ng tin h·ªì s∆° ng∆∞·ªùi d√πng nh∆∞ email, avatar v√† t√™n.
     */
    @Override
    public ProfileResponse getProfileUser(String email) {
        log.info("Email: {}", email);

        // T√¨m ki·∫øm ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu theo email.
        Optional<User> optionalUser = userRepository.findByEmail(email);

        if (optionalUser.isEmpty()) {
            throw new NotFoundExceptionHandler("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.");
        }

        ProfileResponse profileResponse = new ProfileResponse();
        profileResponse.setEmail(optionalUser.get().getEmail());
        profileResponse.setAvatar(optionalUser.get().getAvatar());
        profileResponse.setName(optionalUser.get().getName());
        profileResponse.setLevel(optionalUser.get().getLevel());
        profileResponse.setPoint(optionalUser.get().getPoint());
        profileResponse.setId(optionalUser.get().getId());
        profileResponse.setRole(optionalUser.get().getRole());
        return profileResponse;
    }

    @Override
    public String forgotPassword(String email) {
        log.info("ForgotPassword ==> Email: {}", email);
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RestApiException("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i."));

        String password = new RandomGenerator().randomPasswordToString();
        user.setPassword(passwordEncoder.encode(password));
        userRepository.save(user);
        emailService.sendEmail(email, password);

        return "Qu√™n th√†nh c√¥ng";
    }

    @Override
    public String resetPassword(RestPassword req) {
        log.info("üîë Reset password for user: {}", req.getIdUser());

        User user = userRepository.findById(req.getIdUser())
                .orElseThrow(() -> new RestApiException("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i."));

        if (!passwordEncoder.matches(req.getOldPassword(), user.getPassword())) {
            throw new RestApiException("M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!");
        }

        user.setPassword(passwordEncoder.encode(req.getNewPassword()));
        userRepository.save(user);

        log.info("‚úÖ Password reset successful for user: {}", user.getId());
        return "ƒê√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!";
    }



}
